# Knowledge Graph-RAG System - Offline Air-Gapped Deployment
# Docker Compose configuration for secure, offline operation

version: '3.8'

services:
  # =============================================================================
  # Neo4j Graph Database with Vector Support
  # =============================================================================
  neo4j:
    image: neo4j:5.15-enterprise
    container_name: neo4j-kg-rag
    hostname: neo4j
    environment:
      # Authentication
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-secure_password_change_me}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      
      # Memory Configuration
      - NEO4J_server_memory_heap_initial__size=2G
      - NEO4J_server_memory_heap_max__size=4G
      - NEO4J_server_memory_pagecache_size=2G
      
      # Security Configuration
      - NEO4J_dbms_security_procedures_unrestricted=gds.*,apoc.*
      - NEO4J_dbms_security_procedures_allowlist=gds.*,apoc.*
      - NEO4J_dbms_ssl_policy_bolt_enabled=true
      - NEO4J_dbms_ssl_policy_https_enabled=true
      
      # Performance Configuration
      - NEO4J_dbms_default_database=neo4j
      - NEO4J_server_bolt_listen__address=0.0.0.0:7687
      - NEO4J_server_http_listen__address=0.0.0.0:7474
      - NEO4J_server_https_listen__address=0.0.0.0:7473
      
      # Vector Index Configuration
      - NEO4J_dbms_jvm_additional=-XX:+UnlockExperimentalVMOptions
      - NEO4J_dbms_jvm_additional=-XX:+UseG1GC
      - NEO4J_server_config_strict__validation_enabled=false
      
    ports:
      - "7474:7474"   # HTTP
      - "7473:7473"   # HTTPS
      - "7687:7687"   # Bolt
    
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_plugins:/plugins
      - neo4j_conf:/conf
      - ./config/neo4j:/var/lib/neo4j/conf:ro
    
    networks:
      - kg_rag_network
    
    security_opt:
      - no-new-privileges:true
    
    read_only: false  # Neo4j requires write access to data directory
    
    tmpfs:
      - /tmp:noexec,nosuid,size=200m
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p ${NEO4J_PASSWORD:-secure_password_change_me} 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # =============================================================================
  # Redis Cache for Vector Indexes and Query Caching
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: redis-kg-rag
    hostname: redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    ports:
      - "6379:6379"
    
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    networks:
      - kg_rag_network
    
    security_opt:
      - no-new-privileges:true
    
    read_only: true
    
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_secure_password}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =============================================================================
  # Knowledge Graph-RAG Application
  # =============================================================================
  kg-rag-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: kg-rag-application
    hostname: kg-rag-app
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    environment:
      # Application Configuration
      - ENVIRONMENT=production
      - OFFLINE_MODE=true
      - DEBUG=false
      
      # Database Configuration
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-secure_password_change_me}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      
      # AI Model Configuration
      - MODEL_CACHE_DIR=/app/models
      - EMBEDDING_DEVICE=cpu
      - OFFLINE_MODE=true
      
      # Security Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change_this_jwt_secret_key_in_production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-change_this_32_byte_encryption_key}
      
      # API Configuration
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=4
    
    ports:
      - "8000:8000"   # Main API
      - "8001:8001"   # MCP Orchestrator
      - "8002:8002"   # Knowledge Graph MCP
      - "8003:8003"   # Vector Search MCP
      - "8004:8004"   # Document Processing MCP
      - "8005:8005"   # Analytics MCP
    
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_models:/app/models
      - ./config:/app/config:ro
    
    networks:
      - kg_rag_network
    
    security_opt:
      - no-new-privileges:true
    
    read_only: true
    
    tmpfs:
      - /tmp:noexec,nosuid,size=500m
      - /app/tmp:noexec,nosuid,size=1g
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # =============================================================================
  # Prometheus Monitoring
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-kg-rag
    hostname: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    ports:
      - "9090:9090"
    
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
    
    networks:
      - kg_rag_network
    
    security_opt:
      - no-new-privileges:true
    
    read_only: true
    
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =============================================================================
  # Grafana Dashboard (Optional for monitoring)
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-kg-rag
    hostname: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_change_me}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
    
    ports:
      - "3000:3000"
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    networks:
      - kg_rag_network
    
    security_opt:
      - no-new-privileges:true
    
    restart: unless-stopped
    
    depends_on:
      - prometheus
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

# =============================================================================
# Volumes for Persistent Data
# =============================================================================
volumes:
  neo4j_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/neo4j
  
  neo4j_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/neo4j
  
  neo4j_plugins:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./config/neo4j/plugins
  
  neo4j_conf:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./config/neo4j/conf
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/app
  
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/app
  
  app_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./models
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana

# =============================================================================
# Network Configuration for Air-Gapped Operation
# =============================================================================
networks:
  kg_rag_network:
    driver: bridge
    internal: true  # No external internet access
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: kg-rag-bridge
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "false"